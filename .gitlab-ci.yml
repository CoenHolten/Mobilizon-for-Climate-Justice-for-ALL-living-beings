image: tcitworld/mobilizon-ci

stages:
  - check
  - test
  - deploy
  - docker
  - release

variables:
  MIX_ENV: "test"
  # DB Variables for Postgres / Postgis
  POSTGRES_DB: mobilizon_test
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: ""
  POSTGRES_HOST: postgres
  # DB Variables for Mobilizon
  MOBILIZON_DATABASE_USERNAME: $POSTGRES_USER
  MOBILIZON_DATABASE_PASSWORD: $POSTGRES_PASSWORD
  MOBILIZON_DATABASE_DBNAME: $POSTGRES_DB
  MOBILIZON_DATABASE_HOST: $POSTGRES_HOST
  GEOLITE_CITIES_PATH: "/usr/share/GeoIP/GeoLite2-City.mmdb"
  MOBILIZON_INSTANCE_REGISTRATIONS_OPEN: "true"
  # Release elements
  PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}/${PACKAGE_VERSION}"
  ELIXIR_ASSET: "${CI_PROJECT_NAME}-standalone-${CI_COMMIT_TAG}.tar.gz"
  FRONTEND_ASSET: "${CI_PROJECT_NAME}-frontend-${CI_COMMIT_TAG}.tar.gz"


cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - ~/.cache/Cypress
    - _build/
    - deps/
    - js/node_modules
    - cache/Cypress

lint-elixir:
  stage: check
  script:
    - export EXITVALUE=0
    - mix deps.get
    - mix credo --strict -a || export EXITVALUE=1
    - mix format --check-formatted --dry-run || export EXITVALUE=1
    - exit $EXITVALUE

lint-front:
  image: node:14
  stage: check
  before_script:
    - export EXITVALUE=0
    - cd js
  script:
    - yarn install
    - yarn run lint || export EXITVALUE=1
    - yarn run prettier -c . || export EXITVALUE=1
    - yarn run build:assets || export EXITVALUE=1
    - exit $EXITVALUE
  artifacts:
    expire_in: 1 day
    when: on_success
    paths:
      - priv/static

deps:
  stage: check
  script:
    - export EXITVALUE=0
    - mix deps.get
    - mix hex.outdated || export EXITVALUE=1
    - cd js
    - yarn outdated || export EXITVALUE=1
    - exit $EXITVALUE
  allow_failure: true

exunit:
  stage: test
  services:
    - name: mdillon/postgis:11
      alias: postgres
  before_script:
    - cd js
    - yarn install
    - yarn run build:assets
    - cd ../
    - mix deps.get
    - MIX_ENV=test mix ecto.create
    - MIX_ENV=test mix ecto.migrate
  needs:
    - deps
    - lint-elixir
  script:
    - mix coveralls

jest:
  stage: test
  before_script:
    - cd js
    - yarn install
  dependencies:
    - lint-front
  script:
    - yarn run test:unit --no-color
  artifacts:
    when: always
    paths:
      - js/coverage
    expire_in: 30 days
# cypress:
#   stage: test
#   services:
#     - name: mdillon/postgis:11
#       alias: postgres
#   script:
#     - mix deps.get
#     - cd js
#     - yarn install
#     - npx cypress install # just to be sure
#     - yarn run build
#     - cd ../
#     - MIX_ENV=e2e mix ecto.create
#     - MIX_ENV=e2e mix ecto.migrate
#     - MIX_ENV=e2e mix run priv/repo/e2e.seed.exs
#     - MIX_ENV=e2e mix phx.server &
#     - cd js
#     - npx wait-on http://localhost:4000
#     - if [ -z "$CYPRESS_KEY" ]; then npx cypress run; else npx cypress run --record --parallel --key $CYPRESS_KEY; fi
#   artifacts:
#     expire_in: 2 day
#     paths:
#       - js/tests/e2e/screenshots/**/*.png
#       - js/tests/e2e/videos/**/*.mp4

# pages:
#   stage: deploy
#   script:
#     # - mkdir public
#     # Mobilizon documentation is now on https://framagit.org/framasoft/joinmobilizon/documentation
#     # Mix docs disabled because of https://github.com/elixir-lang/ex_doc/issues/1172
#     # - mix deps.get
#     # - mix docs
#     # - mv doc public/backend
#     #- cd js
#     #- yarn install
#     #- yarn run styleguide:build
#     #- mv styleguide ../public/frontend
#   only:
#     - master
#   artifacts:
#     expire_in: 1 hour
#     paths:
#       - public

.docker: &docker
  stage: docker
  cache: {}
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  before_script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$CI_REGISTRY_AUTH\",\"email\":\"$CI_REGISTRY_EMAIL\"}}}" > /kaniko/.docker/config.json
  script:
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/docker/production/Dockerfile --destination $DOCKER_IMAGE_NAME

build-docker-master:
  <<: *docker
  only:
    - schedules
  variables:
    DOCKER_IMAGE_NAME: framasoft/mobilizon:master

build-docker-tag:
  <<: *docker
  only:
    - tags
  variables:
    DOCKER_IMAGE_NAME: framasoft/mobilizon:$CI_COMMIT_TAG

build-release-frontend:
  stage: release
  image: node:14-alpine
  before_script:
  - apk add --no-cache python build-base libwebp-tools bash imagemagick ncurses
  script:
  - yarn --cwd "js" install
  - yarn --cwd "js" run build
  artifacts:
    expire_in: 1 day
    paths:
    - priv/static


build-release-elixir:
  stage: release
  image: elixir:alpine
  before_script:
  - apk add --no-cache build-base git cmake
  variables:
    MIX_ENV: "prod"
  script:
  - mix local.hex --force
  - mix local.rebar --force
  - mix deps.get
  - cp docker/production/releases.exs ./config/
  - mix phx.digest
  - mix release
  needs:
  - build-release-frontend
  artifacts:
    expire_in: 1 day
    paths:
    - _build/prod/rel

build-release-upload:
  stage: release
  image: curlimages/curl:latest
  # rules:
  #   - if: $CI_COMMIT_TAG
  script: |
    ls -R _build
    tar czf /tmp/${ELIXIR_ASSET} -C _build/prod/rel mobilizon
    tar czf /tmp/${FRONTEND_ASSET} -C priv/static .
    ls -al /tmp/*.tar.gz

    curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file "_build/${ELIXIR_ASSET}" ${PACKAGE_REGISTRY_URL}/${ELIXIR_ASSET}
    curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file "_build/${FRONTEND_ASSET}" ${PACKAGE_REGISTRY_URL}/${FRONTEND_ASSET}
  artifacts:
    expire_in: 1 day
    when: on_success
    paths:
      - _build/${ELIXIR_ASSET}
      - _build/${FRONTEND_ASSET}
  needs:
  - build-release-elixir

build-release-create:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG
  script: |
    release-cli create  --name "Release $CI_COMMIT_SHA" \
                        --tag-name "$CI_COMMIT_TAG" \
                        --assets-link "{\"name\":\"${ELIXIR_ASSET}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${ELIXIR_ASSET}\"}" \
                        --assets-link "{\"name\":\"${FRONTEND_ASSET}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${FRONTEND_ASSET}\"}"
  needs:
  - build-release-upload

